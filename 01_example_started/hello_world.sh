#!/bin/bash
# @author: hoojo
# @email: hoojo_@126.com
# @github: https://github.com/hooj0
# @create date: 2018-05-26 20:12:45
# @copyright by hoojo@2018
# @changelog Added Bash `started -> hello world` example


# ========================================================================================
# #! 是一个约定的标记 shebang，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shel
# ========================================================================================
# 它告诉系统这个脚本需要 bash 解释器来执行
# #!/bin/bash
# ----------------------------------------------------------------------------------------



# ========================================================================================
# 示例：运行 Shell 脚本有两种方法：
# ========================================================================================
# 1、作为可执行程序
# 2、作为解释器参数



# ----------------------------------------------------------------------------------------
# 示例：1、作为可执行程序
# ----------------------------------------------------------------------------------------
# 将上面的代码保存为 hello_world.sh，并 cd 切换到相应目录：

# 使脚本具有执行权限
chmod +x ./hello_world.sh
#执行脚本
./hello_world.sh

# ----------------------------------------------------------------------------------------
# 注意，一定要写成 ./hello_world.sh，而不是 hello_world.sh，运行其它二进制的程序也一样，
# 直接写 hello_world.sh，linux 系统会去 PATH 里寻找有没有叫 hello_world.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，
# 你的当前目录通常不在 PATH 里，所以写成 hello_world.sh 是会找不到命令的，要用 ./hello_world.sh 告诉系统说，就在当前目录找。
# ----------------------------------------------------------------------------------------
echo $PATH  # 输出查询脚本的路径，这些路径没有，就会提示无法找到脚本



# ----------------------------------------------------------------------------------------
# 示例：2、作为解释器参数
#      这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名
# ----------------------------------------------------------------------------------------
/bin/sh hello_world.sh
/bin/php hello_world.php

sh hello_world.sh
bash hello_world.sh
# ----------------------------------------------------------------------------------------
# 这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。
# ----------------------------------------------------------------------------------------




# ========================================================================================
# source、sh、bash、./ 执行脚本的区别是什么？
# ========================================================================================
# 在当前 bash 环境下读取并执行 filename 中的命令
source filename

# 运行一个 shell 脚本时会启动另一个命令解释器
./filename

# 运行一个 shell 脚本时会启动另一个命令解释器
sh filename
# 或
bash filename



# ----------------------------------------------------------------------------------------
# 1. source 命令用法：
# ----------------------------------------------------------------------------------------
# 在当前 bash 环境下读取并执行 filename 中的命令。该 filename 文件可以无 "执行权限"。
source filename
# 注：该命令通常用命令 . 来替代。


# ----------------------------------------------------------------------------------------
# 2. sh、bash 的命令用法：
# ----------------------------------------------------------------------------------------
# 打开一个子 shell 来读取并执行 filename 中命令。该 filename 文件可以无 "执行权限"。
sh filename
# 或
bash filename
# 注：运行一个 shell 脚本时会启动另一个命令解释器。


# ----------------------------------------------------------------------------------------
# 3. ./ 的命令用法：
# ----------------------------------------------------------------------------------------
# 打开一个子 shell 来读取并执行 filename 中命令，该 filename 文件需要 "执行权限"。
./filename
# 注：运行一个 shell 脚本时会启动另一个命令解释器。
