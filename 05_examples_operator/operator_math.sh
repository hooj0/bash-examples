#!/bin/bash
# @author: hoojo
# @email: hoojo_@126.com
# @github: https://github.com/hooj0
# @create date: 2018-05-29 21:02:47
# @copyright by hoojo@2018
# @changelog Added bash `operator -> math` example



# ==============================================================================================
#       算术运算符
# ==============================================================================================
# 下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：
# ----------------------------------------------------------------------------------------------
# 运算符			说明											举例
# ----------------------------------------------------------------------------------------------
# +				加法										`expr $a + $b` 结果为 30
# -				减法										`expr $a - $b` 结果为 -10
# *				乘法										`expr $a \* $b` 结果为  200
# /				除法										`expr $b / $a` 结果为 2
# %				取余										`expr $b % $a` 结果为 0
# **			乘方										`expr $b ** $a` 结果为 10240000000000
# =				赋值			 							 a=$b 将把变量 b 的值赋给 a
# ==			相等。用于比较两个数字，相同则返回 true。		[ $a == $b ] 返回 false
# !=			不相等。用于比较两个数字，不相同则返回 true。	[ $a != $b ] 返回 true
# ----------------------------------------------------------------------------------------------
# 注意：条件表达式要放在方括号之间，并且要有空格，
# 例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]
# ==============================================================================================
#           赋值运算符
# ----------------------------------------------------------------------------------------------
# 表示法 	                描述
# ----------------------------------------------------------------------------------------------
# parameter = value 	简单赋值。给 parameter 赋值
# parameter += value 	加。等价于 parameter = parameter + value
# parameter -= value 	减。等价于 parameter = parameter – value
# parameter *= value 	乘。等价于 parameter = parameter * value
# parameter /= value 	整除。等价于 parameter = parameter / value
# parameter %= value 	取模。等价于 parameter = parameter % value
# parameter++ 	        后缀自增变量。等价于 parameter = parameter + 1 (但，要看下面的讨论)
# parameter-- 	        后缀自减变量。等价于 parameter = parameter - 1
# ++parameter 	        前缀自增变量。等价于 parameter = parameter + 1
# --parameter 	        前缀自减变量。等价于 parameter = parameter - 1
# ==============================================================================================
#           位运算符
# ----------------------------------------------------------------------------------------------
# 运算符 	    描述
# ----------------------------------------------------------------------------------------------
# ~ 	按位取反。对一个数字所有位取反
# << 	位左移. 把一个数字的所有位向左移动
# >> 	位右移. 把一个数字的所有位向右移动
# & 	位与。对两个数字的所有位执行一个 AND 操作
# | 	位或。对两个数字的所有位执行一个 OR 操作
# ^ 	位异或。对两个数字的所有位执行一个异或操作
# ==============================================================================================
#           比较运算符
# ----------------------------------------------------------------------------------------------
# 运算符       	描述
# ----------------------------------------------------------------------------------------------
# <= 	        小于或相等
# >= 	        大于或相等
# < 	        小于
# > 	        大于
# == 	        相等
# != 	        不相等
# && 	        逻辑与
# || 	        逻辑或
# expr1?expr2:expr3 	条件（三元）运算符。若表达式 expr1 的计算结果为非零值（算术真），
#                       则 执行表达式 expr2，否则执行表达式 expr3。
# ----------------------------------------------------------------------------------------------




# ==============================================================================================
# 示例: 算术运算符实例
# ==============================================================================================
a=10
b=20

val=`expr $a + $b`
echo "a + b : $val"

val=`expr $a - $b`
echo "a - b : $val"

val=`expr $a \* $b`
echo "a * b : $val"

val=`expr $b / $a`
echo "b / a : $val"

val=`expr $b % $a`
echo "b % a : $val"

if [ $a == $b ]; then
   echo "a 等于 b"
fi

if [ $a != $b ]; then
   echo "a 不等于 b"
fi

# output:
# ----------------------------------------------------------------------------------------------
# a + b : 30
# a - b : -10
# a * b : 200
# b / a : 2
# b % a : 0
# a 不等于 b


# 注意：
# ----------------------------------------------------------------------------------------------
# 乘号(*)前边必须加反斜杠(\)转义才能实现乘法运算
# if...then...fi 是条件语句，后续将会讲解
# 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 "*" 不需要转义符号 "\"



echo $(( 5 / 2 ))   # 2
echo $(( 5 % 2 ))   # 1


# ==============================================================================================
# 示例：赋值运算
# ==============================================================================================
# foo 赋了一个空值
foo=

# 验证 foo 的确为空
echo $foo   # empyt


# if 复合命令 (( foo = 5 ))
# 会做：
#   1）它把5赋值给变量 foo，
#   2）它计算测试条件为真，因为 foo 的值非零
if (( foo = 5 ));then echo "It is true."; fi    # It is true.

# 比较并赋值
echo $foo   #5



# ==============================================================================================
# 示例：赋值运算符
# ==============================================================================================
foo=1
echo $((foo++))     # 1
echo $foo           # 2


foo=1
echo $((++foo))     # 2
echo $foo           # 2


# ==============================================================================================
# 示例：演示产生2的幂列表的操作，使用位左移运算符
# ==============================================================================================
for ((i=0;i<8;++i)); do echo $((1<<i)); done

# output:
# ----------------------------------------------------------------------------------------------
#1
#2
#4
#8
#16
#32
#64
#128



# ==============================================================================================
# 示例：比较运算符
# ==============================================================================================
if ((1)); then echo "true"; else echo "false"; fi       # true
if ((0)); then echo "true"; else echo "false"; fi       # false


# 三元运算
a=0
((a<1?++a:--a))
echo $a     # 1

((a<1?++a:--a))
echo $a     # 0

((a<1?(a+=1):(a-=1)))

