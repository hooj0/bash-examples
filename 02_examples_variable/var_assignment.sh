#!/bin/bash
# @author: hoojo
# @email: hoojo_@126.com
# @github: https://github.com/hooj0
# @create date: 2018-06-03 09:52:32
# @copyright by hoojo@2018
# @changelog Added bash `variable -> var assignment` example



# ==========================================================================
#       变量操作
# ==========================================================================
# 赋值：
#   r=`expr $a + $b`
#   r=$[a+b]
#   let "r=a+b+a"
#   :${d:= 10}
# --------------------------------------------------------------------------
# 运算：
#   (( var += 1 ))
#   (( var++ ))
#   (( var = var * var ))
#   let 'var = var / 3'
#   var=$((var += 2))
#   var=$((var-1))
# --------------------------------------------------------------------------
# 变量默认值：
#   ${VARNAME:-DEFAULT_VALUE} 如果 VARNAME 未定义，则 DEFAULT_VALUE 作为默认值
#   ${VARNAME:-} 默认值为空字符
# --------------------------------------------------------------------------



# ==========================================================================
# 示例：变量赋值
# ==========================================================================
a=1
b=2

r=`expr $a + $b`
echo "result: $r"

r=`expr $a + $b + $r`
echo "result: $r"

r=$[a+b]
echo "result: $r"

let "r=a+b+a"
echo "result: $r"

# var:= 不能有空格
:${d:= 10}
echo "result-d: $d"



# ==========================================================================
# 示例： 变量运算赋值
# --------------------------------------------------------------------------
# bash 里面可以用 (( )) 执行 C 风格的算术表达式
# ==========================================================================
var=0
(( var += 1 ))
echo "var: $var"    # 现在 var 是 1

(( var++ ))
echo "var: $var"    # 自增，2

(( var = var * var ))
echo "var: $var"    # 乘法 var 现在是 4


let 'var = var / 3'
echo "var: $var"    # 只有 bash 才能用的拓展。除法是整数除法，向 0 舍入，1


# $(( )) 会展开成为这个 C 表达式求值的结果，和 bash 中 $[ ] 一样，但不推荐使用
var=$((var += 2))
echo "var: $var"    # var 现在是 3


var=$((var-1))
echo "var: $var"    # 展开成 var=2



# ==========================================================================
# 变量参数默认值
# ==========================================================================
#${name:?参数不存在}
#echo "${name:-haha}"


# 当文件执行参数不为1个时，提示
#input_file=${1:?用法: $0 args}
#echo "$input_file"


# 当文件参数有2个时
#output_file=${2:-logfile}
#echo "$output_file"



#变量$foo尚未设置。在严格模式下，下一行触发错误。
bar=$foo

# ${VARNAME:-DEFAULT_VALUE} 如果 VARNAME 未定义，则使用 DEFAULT_VALUE 作为默认值.
# So here, $bar is set to "alpha":
bar=${foo:-alpha}

# 现在我们明确地设置foo：
foo="beta"

# 忽略默认值. $bar = "beta":
bar=${foo:-alpha}

# 要使默认值为空字符串，请使用 ${VARNAME:-}
empty_string=${some_undefined_var:-}




# ==========================================================================
# 示例：算术求值和展开——数基
# ==========================================================================
# 指定不同的数基
# --------------------------------------------------------------------------
# 表示法 	        描述
# --------------------------------------------------------------------------
# number 	    默认情况下，没有任何表示法的数字被看做是十进制数（以10为底）。
# 0number 	    在算术表达式中，以零开头的数字被认为是八进制数。
# 0xnumber 	    十六进制表示法
# base#number 	number 以 base 为底
# ==========================================================================
echo $((0xff))          # 255
echo $((2#11111111))    # 255

# output:
# --------------------------------------------------------------------------
#
















