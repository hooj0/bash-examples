#!/bin/bash
# @author: hoojo
# @email: hoojo_@126.com
# @github: https://github.com/hooj0
# @create date: 2018-06-06 21:40:12
# @copyright by hoojo@2018
# @changelog Added bash `function->func param` example

# ======================================================================
#					Shell 函数————函数参数
# ======================================================================

# 在Shell中，调用函数时可以向其传递参数。
# 在函数体内部，通过 $n 的形式来获取参数的值，
# 例如，$1表示第一个参数，$2表示第二个参数...
# 注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数。
# -----------------------------------------------------------------------

# 另外，还有几个特殊字符用来处理参数：
# -----------------------------------------------------------------------
# 参数处理		说明
# -----------------------------------------------------------------------
# $#		传递到脚本的参数个数
# $*		以一个单字符串显示所有向脚本传递的参数
# $$		脚本运行的当前进程ID号
# $!		后台运行的最后一个进程的ID号
# $@		与$*相同，但是使用时加引号，并在引号中返回每个参数。
# $-		显示Shell使用的当前选项，与set命令功能相同。
# $?		显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
# -----------------------------------------------------------------------


# 带参数的函数示例：
# -----------------------------------------------------------------------

funWithParam(){
    echo "第一个参数为 $1 !"
    echo "第二个参数为 $2 !"
    echo "第十个参数为 $10 !"
    echo "第十个参数为 ${10} !"
    echo "第十一个参数为 ${11} !"
    echo "参数总数有 $# 个!"
    echo "作为一个字符串输出所有参数 $* !"
}
funWithParam 1 2 3 4 5 6 7 8 9 34 73

# 输出结果：
# -----------------------------------------------------------------------
# 第一个参数为 1 !
# 第二个参数为 2 !
# 第十个参数为 10 !
# 第十个参数为 34 !
# 第十一个参数为 73 !
# 参数总数有 11 个!
# 作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !
# -----------------------------------------------------------------------
# 注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数。
# -----------------------------------------------------------------------

read exits