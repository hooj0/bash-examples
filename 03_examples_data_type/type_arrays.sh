#!/bin/bash
# @author: hoojo
# @email: hoojo_@126.com
# @github: https://github.com/hooj0
# @create date: 2018-05-27 18:05:28
# @copyright by hoojo@2018
# @changelog Added bash `type -> arrays` example



#########################################################################
# 				Shell 数组
#########################################################################
# bash支持一维数组（不支持多维数组），并且没有限定数组的大小。
#-------------------------------------------------------------------------
#
# 类似与C语言，数组元素的下标由0开始编号。
# 获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。
#########################################################################

# 定义数组
#-------------------------------------------------------------------------
# 在Shell中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：
#
# 数组名=(值1 值2 ... 值n)
#-------------------------------------------------------------------------


# 例如：
#-------------------------------------------------------------------------
array_name=(value0 value1 value2 value3)
echo "array: ${array_name[@]}"

# 或者
array_name=(
 	a
 	b
 	c
 	d
)
echo "array: ${array_name[@]}"

# 或者
array=([2]=a [0]=b [1]=c)
echo "array: ${array[@]}"

# 还可以单独定义数组的各个分量：
#-------------------------------------------------------------------------
# 可以不使用连续的下标，而且下标的范围没有限制。
array_name[0]=v0
array_name[1]=v1
array_name[n]=vn

echo
echo "array[@]: ${array_name[@]}"
echo
echo "array[0]: ${array_name[0]}"
echo "array[1]: ${array_name[1]}"
echo "array[2]: ${array_name[2]}"
echo "array[3]: ${array_name[3]}"
echo

# a 会转换为 0
echo a
array_name[a]=a
echo "array[a]: ${array_name[a]}"


#-------------------------------------------------------------------------
# 数组的值也可以写入变量。
#-------------------------------------------------------------------------

# 例如：
A=1
my_array=($A B C D)

echo "第一个元素为: ${my_array[0]}" # 1
echo "第二个元素为: ${my_array[1]}"
echo "第三个元素为: ${my_array[2]}"
echo "第四个元素为: ${my_array[3]}"


#-------------------------------------------------------------------------
# 读取数组
#-------------------------------------------------------------------------
# 读取数组元素值的一般格式是：
# ${数组名[下标]}
#
# 例如：
valueN=${array_name[n]}
echo "valueN:${valueN}"

# 使用@符号可以获取数组中的所有元素，例如：
echo ${array_name[@]}


# 根据数组元素索引获取该数组元素值时，数组下标可为变量。
arr=(a b c d)
i=2
echo ${arr[i]} # c


#-------------------------------------------------------------------------
# 获取数组的长度
#-------------------------------------------------------------------------
# 获取数组长度的方法与获取字符串长度的方法相同，例如：
#
# 取得数组元素的个数
length=${#array_name[@]}
echo "array length: ${length}"

# 或者
length=${#array_name[*]}
echo "array length: ${length}"

# 取得数组单个元素的长度
item_length=${#array_name[n]}
echo "array length: ${item_length}"



# =================================================================
# 示例：创建一个数组
# =================================================================
a[1]=foo

echo ${a[1]}    # foo


# =================================================================
# 示例：用 declare 命令创建一个数组
# =================================================================
# 使用 -a 选项，declare 命令的这个例子创建了数组 a。
declare -a a


# =================================================================
# 示例：数组赋值
# =================================================================
# 单个值赋值使用以下语法：
name[subscript]=value

# 多个值赋值使用下面的语法：
name=(value1 value2 ...)

days=(Sun Mon Tue Wed Thu Fri Sat)

days=([0]=Sun [1]=Mon [2]=Tue [3]=Wed [4]=Thu [5]=Fri [6]=Sat)


# =================================================================
# 示例：访问数组元素
# =================================================================
usage () {
    echo "usage: $(basename $0) directory" >&2
}

# Check that argument is a directory
if [[ ! -d $1 ]]; then
    usage
    exit 1
fi

# 初始化一个名为 hours 的数组。给每一个数组元素赋值一个0。
# 虽然没有特殊需要在使用之前准备数组，但是 我们的脚本需要确保没有元素是空值。
# 注意这个循环构建方式很有趣。
# 通过使用花括号展开（{0..23}），很容易为 for 命令产生一系列的数据（words）
# Initialize array
for i in {0..23}; do hours[i]=0; done
# Collect data
for i in $(stat -c %y "$1"/* | cut -c 12-13); do
    j=${i/#0}
    ((++hours[j]))
    ((++count))
done

# Display data
echo -e "Hour\tFiles\tHour\tFiles"
echo -e "----\t-----\t----\t-----"
for i in {0..11}; do
    j=$((i + 12))
    printf "%02d\t%d\t%02d\t%d\n" $i ${hours[i]} $j ${hours[j]}
done
printf "\nTotal files = %d\n" $count


# =================================================================
# 示例：输出整个数组的内容
# =================================================================
animals=("a dog" "a cat" "a fish")
for i in ${animals[*]}; do echo $i; done

# output:
#-------------------------------------------------------------------
#a
#dog
#a
#cat
#a
#fish

for i in ${animals[@]}; do echo $i; done

# output:
#-------------------------------------------------------------------
#a
#dog
#a
#cat
#a
#fish

for i in "${animals[*]}"; do echo $i; done

# output:
#-------------------------------------------------------------------
#a dog a cat a fish

for i in "${animals[@]}"; do echo $i; done
# output:
#-------------------------------------------------------------------
#a dog
#a cat
#a fish


# =================================================================
# 示例：确定数组元素个数
# =================================================================
a[100]=foo

# number of array elements
echo ${#a[@]}   # 1

# # length of element 100
echo ${#a[100]} # 3


# =================================================================
# 示例：找到数组使用的下标
# ${!array[*]}  ${!array[@]}
# =================================================================
foo=([2]=a [4]=b [6]=c)

# 输出所有元素
for i in "${foo[@]}"; do echo $i; done
# output:
#-------------------------------------------------------------------
#a
#b
#c

# 输出所有下标
for i in "${!foo[@]}"; do echo $i; done

# output:
#-------------------------------------------------------------------
#2
#4
#6


# =================================================================
# 示例：在数组末尾添加元素
# =================================================================
foo=(a b c)
echo ${foo[@]}      # a b c

# 追加新元素
foo+=(d e f)
echo ${foo[@]}      # a b c d e f


# =================================================================
# 示例：数组排序
# =================================================================
a=(f e d c b a)
echo "Original array: ${a[@]}"      # Original array: f e d c b a

# 排序
a_sorted=($(for i in "${a[@]}"; do echo $i; done | sort))
echo "Sorted array: ${a_sorted[@]}" # Sorted array: a b c d e f



# =================================================================
# 示例：删除数组
# =================================================================
foo=(a b c d e f)
echo ${foo[@]}      #a b c d e f

# 删除一个数组
unset foo
echo ${foo[@]}


# unset 命令删除单个的数组元素
foo=(a b c d e f)
echo ${foo[@]}      #a b c d e f

unset 'foo[2]'
echo ${foo[@]}      # a b d e f


# 给一个数组赋空值，不会清空数组内容：
foo=(a b c d e f)
foo=
echo ${foo[@]}      # b c d e f

# 任何没有下标的对数组变量的引用，都指向数组元素0
foo=(a b c d e f)
echo ${foo[@]}      # a b c d e f

foo=A
echo ${foo[@]}      # A b c d e f



# =================================================================
# 示例：关联数组，关联数组必须用带有 -A 选项的 declare 命令创建
# =================================================================
declare -A colors

colors["red"]="#ff0000"
colors["green"]="#00ff00"
colors["blue"]="#0000ff"

echo ${colors["blue"]}

