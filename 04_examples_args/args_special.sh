#!/bin/bash
# @author: hoojo
# @email: hoojo_@126.com
# @github: https://github.com/hooj0
# @create date: 2018-05-27 22:33:25
# @copyright by hoojo@2018
# @changelog Added bash `args -> special` example

#--------------------------------------------------------
# 特殊参数
#--------------------------------------------------------
# 参数处理			说明
#
#	$#			传递到脚本的参数个数
#	$*			以一个单字符串显示所有向脚本传递的参数。
#				如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
#	$$			脚本运行的当前进程ID号
#	$!			后台运行的最后一个进程的ID号
#	$@			与$*相同，但是使用时加引号，并在引号中返回每个参数。
#				如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
#	$-			显示Shell使用的当前选项，与set命令功能相同。
#	$?			显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
#--------------------------------------------------------

# 运行脚本，传入参数


echo "参数个数：$#"

echo "显示所有参数：$*"
echo "显示所有参数：$@"

echo "当前进程ID：$$"
echo "最后一个进程Id：$!"

echo "当前选项：$-"
echo "最终状态：$?"


# $* 与 $@ 区别：
#--------------------------------------------------------
# 相同点：都是引用所有参数。
# 不同点：只有在双引号中体现出来。
#	非数组形式：假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），
#	数组的形式：而 "@" 等价于 "1" "2" "3"（传递了三个参数）。
#--------------------------------------------------------
echo "-- \$* 演示 ---"
for i in "$*"; do
    echo $i
done

echo "-- \$@ 演示 ---"
for i in "$@"; do
    echo $i
done



# =================================================================
# 示例：命令的退出状态
# =================================================================
ls -d /usr/bin  # /usr/bin
echo $?         # 0


ls -d /bin/usr  # ls: cannot access /bin/usr: No such file or directory
echo $?         # 2

# true 的状态为 0
true
echo $?         # 0

# false 的状态为 1
echo $?         # 1